Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: mat_vec_mul(unsigned int, unsigned int, float **, float *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (mat_vec_mul(unsigned int, unsigned int, float **, float *, float *)) [1/1=100.0%] matvec.cpp(10,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at matvec.cpp(13,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at matvec.cpp(20,9)
      remark #15388: vectorization support: reference a has aligned access   [ matvec.cpp(22,4) ]
      remark #15388: vectorization support: reference b has aligned access   [ matvec.cpp(22,4) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.964
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 12 
      remark #15477: vector loop cost: 0.870 
      remark #15478: estimated potential speedup: 7.980 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at matvec.cpp(20,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference a has aligned access   [ matvec.cpp(22,4) ]
      remark #15388: vectorization support: reference b has aligned access   [ matvec.cpp(22,4) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 9.286
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at matvec.cpp(20,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================
