Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: particles_simulate(t_particle *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (particles_simulate(t_particle *)) [1/3=33.3%] nbody.cpp(12,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.cpp(19,2)
   remark #25445: Loop Interchange not done due to: Data Dependencies
   remark #25446: Dependencies found between following statements:  [From_Line# -> (Dependency Type) To_Line#]
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody.cpp(22,14)
      remark #15328: vectorization support: gather was emulated for the variable p:  strided by 7   [ nbody.cpp(23,12) ]
      remark #15328: vectorization support: gather was emulated for the variable p:  strided by 7   [ nbody.cpp(24,12) ]
      remark #15328: vectorization support: gather was emulated for the variable p:  strided by 7   [ nbody.cpp(25,12) ]
      remark #15328: vectorization support: gather was emulated for the variable p:  strided by 7   [ nbody.cpp(27,12) ]
      remark #15328: vectorization support: gather was emulated for the variable p:  strided by 7   [ nbody.cpp(28,12) ]
      remark #15328: vectorization support: gather was emulated for the variable p:  strided by 7   [ nbody.cpp(29,12) ]
      remark #15329: vectorization support: scatter was emulated for the variable p:  strided by 7   [ nbody.cpp(52,4) ]
      remark #15329: vectorization support: scatter was emulated for the variable p:  strided by 7   [ nbody.cpp(53,4) ]
      remark #15329: vectorization support: scatter was emulated for the variable p:  strided by 7   [ nbody.cpp(54,4) ]
      remark #15329: vectorization support: scatter was emulated for the variable p:  strided by 7   [ nbody.cpp(60,4) ]
      remark #15329: vectorization support: scatter was emulated for the variable p:  strided by 7   [ nbody.cpp(61,4) ]
      remark #15329: vectorization support: scatter was emulated for the variable p:  strided by 7   [ nbody.cpp(62,4) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.096
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15460: masked strided loads: 6 
      remark #15462: unmasked indexed (or gather) loads: 6 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 175 
      remark #15477: vector loop cost: 65.250 
      remark #15478: estimated potential speedup: 2.670 
      remark #15488: --- end vector loop cost summary ---
      remark #25015: Estimate of max trip count of loop=125

      LOOP BEGIN at nbody.cpp(33,15)
         remark #25460: No loop optimizations reported
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody.cpp(23,12):remark #34032: adjacent sparse (strided) loads are not optimized. Details: stride { 28 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x00000003F }.
nbody.cpp(62,4):remark #34033: adjacent sparse (strided) stores are not optimized. Details: stride { 28 }, types { F32-V256, F32-V256, F32-V256, F32-V256, F32-V256, F32-V256 }, number of elements { 8 }, select mask { 0x00000003F }.
===========================================================================

Begin optimization report for: particles_read(FILE *, t_particle *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (particles_read(FILE *, t_particle *)) [2/3=66.7%] nbody.cpp(69,1)
  -> EXTERN: (72,9) fscanf(FILE *, const char *, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.cpp(70,5)
   remark #15527: loop was not vectorized: function call to fscanf(FILE *, const char *, ...) cannot be vectorized   [ nbody.cpp(72,9) ]
LOOP END
===========================================================================

Begin optimization report for: particles_write(FILE *, t_particle *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (particles_write(FILE *, t_particle *)) [3/3=100.0%] nbody.cpp(80,1)
  -> EXTERN: (83,9) fprintf(FILE *, const char *, ...)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody.cpp(81,5)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *, const char *, ...) cannot be vectorized   [ nbody.cpp(83,9) ]
LOOP END
===========================================================================
